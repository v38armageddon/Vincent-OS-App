// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_Vincent_OS_App_Registry_0_H
#define WINRT_Vincent_OS_App_Registry_0_H
WINRT_EXPORT namespace winrt::Vincent_OS_App_Registry
{
    struct IClass;
    struct Class;
}
namespace winrt::impl
{
    template <> struct category<winrt::Vincent_OS_App_Registry::IClass>{ using type = interface_category; };
    template <> struct category<winrt::Vincent_OS_App_Registry::Class>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Vincent_OS_App_Registry::Class> = L"Vincent_OS_App_Registry.Class";
    template <> inline constexpr auto& name_v<winrt::Vincent_OS_App_Registry::IClass> = L"Vincent_OS_App_Registry.IClass";
    template <> inline constexpr guid guid_v<winrt::Vincent_OS_App_Registry::IClass>{ 0xB231E760,0xC620,0x50EC,{ 0x92,0x70,0x98,0x29,0x7D,0xC6,0x00,0x5D } }; // B231E760-C620-50EC-9270-98297DC6005D
    template <> struct default_interface<winrt::Vincent_OS_App_Registry::Class>{ using type = winrt::Vincent_OS_App_Registry::IClass; };
    template <> struct abi<winrt::Vincent_OS_App_Registry::IClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Vincent_OS_App_Registry_IClass
    {
        [[nodiscard]] auto MyProperty() const;
        auto MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::Vincent_OS_App_Registry::IClass>
    {
        template <typename D> using type = consume_Vincent_OS_App_Registry_IClass<D>;
    };
}
#endif
